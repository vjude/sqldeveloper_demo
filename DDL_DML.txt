/*drop statements list*/
DROP TABLE STAFF CASCADE CONSTRAINTS;
DROP TABLE VENDOR CASCADE CONSTRAINTS;
DROP TABLE MANUFACTURING CASCADE CONSTRAINTS;
DROP TABLE REQUEST CASCADE CONSTRAINTS;
DROP TABLE MATERIAL CASCADE CONSTRAINTS;

DROP SEQUENCE STAFF_ID_SEQ;
DROP SEQUENCE VENDOR_ID_SEQ;
DROP SEQUENCE PROCESS_NUMBER_SEQ;
DROP SEQUENCE REQUEST_ID_SEQ;
DROP SEQUENCE MATERIAL_ID_SEQ;

CREATE TABLE STAFF(
STAFF_ID NUMERIC(10) NOT NULL PRIMARY KEY,
LAST_NAME VARCHAR(50) NOT NULL,
FIRST_NAME VARCHAR(50) NOT NULL,
PHONE NUMERIC(25) NOT NULL,
DOB DATE,
SSN NUMERIC(9) NOT NULL,
ACCESS_LEVEL VARCHAR(15) NOT NULL
);

CREATE TABLE VENDOR(
VENDOR_ID NUMERIC(10) NOT NULL PRIMARY KEY,
VENDOR_EMAIL VARCHAR(100) NOT NULL,
VENDOR_PHONE NUMERIC(11) NOT NULL,
VENDOR_NAME VARCHAR(50) NOT NULL,
VENDOR_FAX NUMERIC(20)
);

/*MANUFACTURING table creation*/
CREATE TABLE MANUFACTURING(
PROCESS_NUMBER NUMERIC(10) NOT NULL PRIMARY KEY,
PROCESS_DESCRIPTION VARCHAR(30),
MANUFACTURING_STAFF NUMERIC(10) NOT NULL,
DATE_USED DATE,
/*
For completion_status column, boolean statement is indicated
by a number data type because Oracle SQL developer does not allow boolean 
statements. 1= True 0=False
*/
PROCESS_STATUS NUMERIC(1),
QUANTITY_USED NUMERIC(5) NOT NULL,
WASTED_MATERIALS NUMERIC(20),
/*process table constraints and indexes
/*FK naming convention 
[child entity where fk column is located]_[parent entity]_FK*/
CONSTRAINT MANUFACTURING_STAFF_FK FOREIGN KEY (MANUFACTURING_STAFF)
REFERENCES STAFF(STAFF_ID)
);

CREATE TABLE REQUEST(
REQUEST_ID NUMERIC(10) NOT NULL,
VENDOR_ID_FK NUMERIC(10) NOT NULL,
REQUESTING_STAFF NUMERIC(10) NOT NULL,
REQUEST_QUANTITY NUMERIC(30) NOT NULL,
DATE_NEEDED DATE,
/*
For completion_status column, boolean statement is indicated
by a number data type because Oracle SQL developer does not allow boolean 
statements. 1= True 0=False
*/
COMPLETION_STATUS NUMERIC(1) NOT NULL,
DATE_REQUESTED DATE NOT NULL,
NOTE VARCHAR(500),
/*
request table constraints and indexes
*/ 
CONSTRAINT PK_REQUEST PRIMARY KEY (REQUEST_ID, VENDOR_ID_FK),
CONSTRAINT REQUEST_VENDOR_FK FOREIGN KEY(VENDOR_ID_FK)
REFERENCES VENDOR(VENDOR_ID),
CONSTRAINT REQUEST_STAFF_FK FOREIGN KEY(REQUESTING_STAFF)
REFERENCES STAFF(STAFF_ID)
);

CREATE TABLE MATERIAL(
MATERIAL_ID NUMERIC(10) NOT NULL,
REQUEST_ID_FK NUMERIC(10) NOT NULL,
PROCESS_NUMBER_FK NUMERIC(10),
VENDOR_ID_REQUEST_FK NUMERIC(10) NOT NULL,
EXPIRATION_DATE DATE,
HAZARD_LEVEL VARCHAR(20),
MATERIAL_NAME VARCHAR(75) NOT NULL,
QUANTITY_AVAILABLE NUMERIC(30) NOT NULL,
STORAGE_LOCATION VARCHAR(20) NOT NULL,
PRICE NUMERIC(5) NOT NULL,
/*
material table constraints and indexes
*/
CONSTRAINT PK_MATERIAL PRIMARY KEY(MATERIAL_ID, REQUEST_ID_FK),
CONSTRAINT MATERIAL_REQUEST_FK FOREIGN KEY(REQUEST_ID_FK, VENDOR_ID_REQUEST_FK)
REFERENCES REQUEST(REQUEST_ID, VENDOR_ID_FK),
CONSTRAINT MATERIAL_MANUFACTURING_FK FOREIGN KEY(PROCESS_NUMBER_FK)
REFERENCES MANUFACTURING(PROCESS_NUMBER)
);

/*INDEXES FOR FOREIGN KEYS*/
CREATE INDEX MANUFACTURING_STAFF_FK ON MANUFACTURING(MANUFACTURING_STAFF);
CREATE INDEX REQUEST_VENDOR_FK ON REQUEST(VENDOR_ID_FK);
CREATE INDEX REQUEST_STAFF_FK ON REQUEST(REQUESTING_STAFF);
CREATE INDEX MATERIAL_REQUEST_FK ON MATERIAL(REQUEST_ID_FK, 
VENDOR_ID_REQUEST_FK);
CREATE INDEX MATERIAL_MANUFACTURING_FK ON MATERIAL(PROCESS_NUMBER_FK);

/*INDEXES FOR NATURAL KEYS AND FREQUENTLY USED COLUMNS*/
--VENDOR name (natural key) and phone number
CREATE UNIQUE INDEX VENDOR_NAME_UX ON VENDOR(VENDOR_NAME);
CREATE INDEX VENDOR_PHONE_UX ON VENDOR(VENDOR_PHONE);

--STAFF FIRST AND LAST NAME (a frequently used identifier)
CREATE INDEX STAFF_LAST_NAME_UX ON STAFF(LAST_NAME);
CREATE INDEX STAFF_FIRST_NAME_US ON STAFF(FIRST_NAME);

--QUANTITY USED (useful for tracing where materials end up)
CREATE INDEX MANUFACTURING_QUANTITY_USED_UX ON 
MANUFACTURING(QUANTITY_USED);

/*REQUEST QUANTITY, DATE REQUESTED AND DATE NEEDED (frequently used data for
tracking submitted and needed requests
useful info for avoiding 
too high/low inventory or duplicate requests*/
CREATE INDEX REQUEST_QUANTITY_UX ON REQUEST(REQUEST_QUANTITY);
CREATE INDEX REQUEST_DATE_REQUESTED_UX ON REQUEST(DATE_REQUESTED);
CREATE INDEX REQUEST_DATE_NEEDED_UX ON REQUEST (DATE_NEEDED);

/*MATERIAL EXPIRATION DATE AND HAZARD LEVEL (these are frequently looked up
by operators for routine processing)*/
CREATE INDEX MATERIAL_EXPIRATION_DATE_UX ON MATERIAL(EXPIRATION_DATE);
CREATE INDEX MATERIAL_HAZARD_LEVEL_UX ON MATERIAL(HAZARD_LEVEL);

/*alter tables to include audit columns for tracing table updates and changes*/
--STAFF
ALTER TABLE STAFF ADD
(CREATED_BY VARCHAR2(30),
DATE_CREATED DATE,
MODIFIED_BY VARCHAR2(30),
DATE_MODIFIED DATE);

--VENDOR
ALTER TABLE VENDOR ADD
(CREATED_BY VARCHAR2(30),
DATE_CREATED DATE,
MODIFIED_BY VARCHAR2(30),
DATE_MODIFIED DATE);

--MANUFACTURING
ALTER TABLE MANUFACTURING ADD
(CREATED_BY VARCHAR2(30),
DATE_CREATED DATE,
MODIFIED_BY VARCHAR2(30),
DATE_MODIFIED DATE);

--REQUEST
ALTER TABLE REQUEST ADD
(CREATED_BY VARCHAR2(30),
DATE_CREATED DATE,
MODIFIED_BY VARCHAR2(30),
DATE_MODIFIED DATE);

--MATERIAL
ALTER TABLE MATERIAL ADD
(CREATED_BY VARCHAR2(30),
DATE_CREATED DATE,
MODIFIED_BY VARCHAR2(30),
DATE_MODIFIED DATE);

/*
Views
Format: VW_{table_name or description}
/*
staff view business rule: this view contains frequently used info
needed for identifying employees within the WMS. Data such as DOB and SSN
are contained within the STAFF table. Because of this sensitive data
not all users will have access to the STAFF table to ensure employee privacy
rights are maitained. The VW_STAFF view provides the staff full name and 
contact data which may be required for manufacturing without displaying
sensitive employee information.
*/
CREATE OR REPLACE VIEW VW_STAFF AS
SELECT STAFF_ID, FIRST_NAME, LAST_NAME, PHONE FROM STAFF;

/*vendor view business rule: this view displays all of the information 
within the vendor table except for the audit columns. This view will
primarily be used to obtaining the contact information of Vendors should 
they need to be contacted. */
CREATE OR REPLACE VIEW VW_VENDOR AS 
SELECT VENDOR_ID, VENDOR_NAME, VENDOR_PHONE, VENDOR_EMAIL, VENDOR_FAX 
FROM VENDOR;

/*
request view business rule: this view is used for displaying the 
material information associated with each created request. 
Just viewing the REQUEST table alone does not provide this information, 
this view is useful for looking up how many of a certain material was 
requested and when, and whether the request has been completed. 
This can be useful for tracing pending requests or deciding if another request 
needs to be made to a vendor.
*/
CREATE OR REPLACE VIEW VW_REQUEST AS 
SELECT REQUEST.REQUEST_ID, REQUEST.DATE_REQUESTED, REQUEST.VENDOR_ID_FK, 
REQUEST.REQUEST_QUANTITY, REQUEST.COMPLETION_STATUS, MATERIAL.MATERIAL_ID,
MATERIAL.MATERIAL_NAME FROM REQUEST, MATERIAL WHERE
REQUEST.REQUEST_ID = MATERIAL.REQUEST_ID_FK ORDER BY REQUEST.REQUEST_ID;

/*
manufacturing view business rules: this view is used for viewing what
materials were used within each manufacturing process. Just viewing the 
MANUFACTURING table alone does not provide this information. This view
allows the manufacturing schedulers and warehouse department to trend
the use of each material as it relates to each process and supply materials
accordingly.
*/
CREATE OR REPLACE VIEW VW_MANUFACTURING AS 
SELECT MANUFACTURING.PROCESS_NUMBER, PROCESS_DESCRIPTION, MANUFACTURING.PROCESS_STATUS, 
MANUFACTURING.DATE_USED, MANUFACTURING.QUANTITY_USED, MATERIAL.MATERIAL_ID,
MATERIAL.MATERIAL_NAME FROM MANUFACTURING, MATERIAL WHERE
MANUFACTURING.PROCESS_NUMBER = MATERIAL.PROCESS_NUMBER_FK;

/*material view business rule: this view includes the most used columns 
needed for proccessing and tracing materials such as; 
material id, expiration date, hazard level, quantity available, and 
storage location. Columns with supplemental data and
and audit columns are not included.
This view is primaily useful for manufacturing staff who need
to know more information about a material as it relates to 
manufacturing.*/
CREATE OR REPLACE VIEW VW_MATERIAL AS SELECT MATERIAL_ID, MATERIAL_NAME, 
EXPIRATION_DATE, HAZARD_LEVEL, QUANTITY_AVAILABLE, STORAGE_LOCATION 
FROM MATERIAL;

/*sequence statements*/

--sequence for STAFF table
CREATE SEQUENCE STAFF_ID_SEQ
INCREMENT BY 3
START WITH 230
NOMAXVALUE
MINVALUE 1
NOCACHE;

--sequence for VENDOR_ID
CREATE SEQUENCE VENDOR_ID_SEQ
INCREMENT BY 15
START WITH 100
NOMAXVALUE
MINVALUE 1
NOCACHE;

--sequence for PROCESS_NUMBER
CREATE SEQUENCE PROCESS_NUMBER_SEQ
INCREMENT BY 20
START WITH 100
NOMAXVALUE
MINVALUE 1
NOCACHE;

--sequence for REQUEST_ID
CREATE SEQUENCE REQUEST_ID_SEQ
INCREMENT BY 3
START WITH 500
NOMAXVALUE
MINVALUE 1
NOCACHE;

--sequence for MATERIAL_ID
CREATE SEQUENCE MATERIAL_ID_SEQ
INCREMENT BY 20
START WITH 1500
NOMAXVALUE
MINVALUE 1
NOCACHE;

/*create triggers to populate the surrogate keys and audit columns*/
/*
Staff_ID and Staff table audit columns trigger, business rule: each staff
member has a unique number assigned to them in case employees
share the same name, additional audit columns are automatically populated in 
this trigger to trace any changes made to the data within the table.
*/
CREATE OR REPLACE TRIGGER STAFF_ID_SEQ
BEFORE INSERT OR UPDATE ON STAFF FOR EACH ROW
BEGIN
IF :NEW.STAFF_ID IS NULL THEN
:NEW.STAFF_ID :=STAFF_ID_SEQ.NEXTVAL;
END IF;
IF INSERTING THEN
IF :NEW.CREATED_BY IS NULL THEN :NEW.CREATED_BY := USER; END IF;
IF :NEW.DATE_CREATED IS NULL THEN :NEW.DATE_CREATED := SYSDATE; END IF;
END IF;
IF INSERTING OR UPDATING THEN
IF :NEW.MODIFIED_BY IS NULL THEN :NEW.MODIFIED_BY := USER; END IF;
IF :NEW.DATE_MODIFIED IS NULL THEN :NEW.DATE_MODIFIED :=SYSDATE; END IF;
END IF;
END;
/

-- Vendor_ID and vendor table audit columns trigger
/*
VENDOR_ID and VENDOR table audit columns trigger, business rule: each vendor 
has a unique number assigned to them as an identifier. 
This is to more easily identify which vendor supplies which material as
different vendors may supply similar materials. Additionally, when shortages 
occur materials may need to be obtained from different vendors. These ID helps 
identify the material/vendor relationship.
Additional audit columns are automatically populated in 
this trigger to trace any changes made to the data within the table.
*/
CREATE OR REPLACE TRIGGER VENDOR_ID_SEQ
BEFORE INSERT OR UPDATE ON VENDOR FOR EACH ROW
BEGIN
IF :NEW.VENDOR_ID IS NULL THEN
:NEW.VENDOR_ID :=VENDOR_ID_SEQ.NEXTVAL;
END IF;
IF INSERTING THEN
IF :NEW.CREATED_BY IS NULL THEN :NEW.CREATED_BY := USER; END IF;
IF :NEW.DATE_CREATED IS NULL THEN :NEW.DATE_CREATED := SYSDATE; END IF;
END IF;
IF INSERTING OR UPDATING THEN
IF :NEW.MODIFIED_BY IS NULL THEN :NEW.MODIFIED_BY := USER; END IF;
IF :NEW.DATE_MODIFIED IS NULL THEN :NEW.DATE_MODIFIED :=SYSDATE; END IF;
END IF;
END;
/

-- PROCESS_NUMBER sequence and manufacturing table audit columns trigger
/*
PROCESS_NUMBER and MANUFACTURING table audit columns trigger, business rule: 
each manufacturing process has a unique number assigned to it. 
This aids in traceability of each material used to manufacture the
pharmaceutical product, if a product is found to have defects or an 
investigation is occuring this unique identifier provides a quick and easy 
option for searching the process data. 
Additional audit columns are automatically populated in this trigger 
to trace any changes made to the data within the table.
*/
CREATE OR REPLACE TRIGGER PROCESS_NUMBER_SEQ
BEFORE INSERT OR UPDATE ON MANUFACTURING FOR EACH ROW
BEGIN
IF :NEW.PROCESS_NUMBER IS NULL THEN
:NEW.PROCESS_NUMBER :=PROCESS_NUMBER_SEQ.NEXTVAL;
END IF;
IF INSERTING THEN
IF :NEW.CREATED_BY IS NULL THEN :NEW.CREATED_BY := USER; END IF;
IF :NEW.DATE_CREATED IS NULL THEN :NEW.DATE_CREATED := SYSDATE; END IF;
END IF;
IF INSERTING OR UPDATING THEN
IF :NEW.MODIFIED_BY IS NULL THEN :NEW.MODIFIED_BY := USER; END IF;
IF :NEW.DATE_MODIFIED IS NULL THEN :NEW.DATE_MODIFIED :=SYSDATE; END IF;
END IF;
END;
/

-- REQUEST_ID sequence and request table audit columns trigger
/*
REQUEST_ID and REQUEST table audit columns trigger, business rule: 
each request submission has a unique number assigned to it. 
This aids in traceability of each request submitted to a vendor and can be 
used as a reference by the Vendor when contacting the plant regarding a request. 
This ID aids in differentiating scheduled requests, 
or requests that are submitted routinely for the same quantities and materials
because a rate of material use has been established.

Additional audit columns are automatically populated in this trigger 
to trace any changes made to the data within the table.
*/
CREATE OR REPLACE TRIGGER REQUEST_ID_SEQ
BEFORE INSERT OR UPDATE ON REQUEST FOR EACH ROW
BEGIN
IF :NEW.REQUEST_ID IS NULL THEN
:NEW.REQUEST_ID :=REQUEST_ID_SEQ.NEXTVAL;
END IF;
IF INSERTING THEN
IF :NEW.CREATED_BY IS NULL THEN :NEW.CREATED_BY := USER; END IF;
IF :NEW.DATE_CREATED IS NULL THEN :NEW.DATE_CREATED := SYSDATE; END IF;
END IF;
IF INSERTING OR UPDATING THEN
IF :NEW.MODIFIED_BY IS NULL THEN :NEW.MODIFIED_BY := USER; END IF;
IF :NEW.DATE_MODIFIED IS NULL THEN :NEW.DATE_MODIFIED :=SYSDATE; END IF;
END IF;
END;
/

-- MATERIAL_ID sequence and material table audit columns trigger
/*
MATERIAL_ID and MATERIAL table audit columns trigger, business rule: 
each material has a unique number assigned to it. 
Many materials are used throughout the plant, and certain materials
may have similar names/descriptions and functions, but
they are only validated for certain processes (i.e. different pH probes are
used in the cell culture and purification departments, however, they
are manufactured by the same vendor and look very similar). The unique
material_id helps to differentiate similar materials.

Additional audit columns are automatically populated in this trigger 
to trace any changes made to the data within the table.
*/
CREATE OR REPLACE TRIGGER MATERIAL_ID_SEQ
BEFORE INSERT OR UPDATE ON MATERIAL FOR EACH ROW
BEGIN
IF :NEW.MATERIAL_ID IS NULL THEN
:NEW.MATERIAL_ID :=MATERIAL_ID_SEQ.NEXTVAL;
END IF;
IF INSERTING THEN
IF :NEW.CREATED_BY IS NULL THEN :NEW.CREATED_BY := USER; END IF;
IF :NEW.DATE_CREATED IS NULL THEN :NEW.DATE_CREATED := SYSDATE; END IF;
END IF;
IF INSERTING OR UPDATING THEN
IF :NEW.MODIFIED_BY IS NULL THEN :NEW.MODIFIED_BY := USER; END IF;
IF :NEW.DATE_MODIFIED IS NULL THEN :NEW.DATE_MODIFIED :=SYSDATE; END IF;
END IF;
END;
/

/* querying all objects and columns*/
--tables
SELECT TABLE_NAME, STATUS
FROM ALL_TABLES
WHERE TABLE_NAME IN ('STAFF', 'VENDOR', 'MANUFACTURING', 'REQUEST', 'MATERIAL');

--each column in the staff table
SELECT TABLE_NAME, COLUMN_NAME, DATA_TYPE, DATA_LENGTH, NULLABLE
FROM ALL_TAB_COLS t
WHERE TABLE_NAME = 'STAFF';

--each column in the vendor table
SELECT TABLE_NAME, COLUMN_NAME, DATA_TYPE, DATA_LENGTH, NULLABLE
FROM ALL_TAB_COLS t
WHERE TABLE_NAME = 'VENDOR';

--each column in the manufacturing table
SELECT TABLE_NAME, COLUMN_NAME, DATA_TYPE, DATA_LENGTH, NULLABLE
FROM ALL_TAB_COLS t
WHERE TABLE_NAME = 'MANUFACTURING';

--each column in the request table
SELECT TABLE_NAME, COLUMN_NAME, DATA_TYPE, DATA_LENGTH, NULLABLE
FROM ALL_TAB_COLS t
WHERE TABLE_NAME = 'REQUEST';

--each column in the material table
SELECT TABLE_NAME, COLUMN_NAME, DATA_TYPE, DATA_LENGTH, NULLABLE
FROM ALL_TAB_COLS t
WHERE TABLE_NAME = 'MATERIAL';

--statement for checking all objects within the data dictionary
--Note: because the student schema database was used, those objcects are also displayed
SELECT OBJECT_NAME, STATUS, CREATED, LAST_DDL_TIME FROM USER_OBJECTS;

/*
insert statements
*/
--staff values
INSERT INTO STAFF(FIRST_NAME, LAST_NAME, PHONE, SSN, ACCESS_LEVEL)
VALUES('JOE', 'DIRT', 1234567678, 098765431, 'Supervisor');
INSERT INTO STAFF(FIRST_NAME, LAST_NAME, PHONE, SSN, ACCESS_LEVEL)
VALUES('JESS', 'DAY', 2475839890, 123782564, 'MA1');
INSERT INTO STAFF(FIRST_NAME, LAST_NAME, PHONE, SSN, ACCESS_LEVEL)
VALUES('WINSTON', 'BISHOP', 5627890001, 345098710, 'MA1');
INSERT INTO STAFF(FIRST_NAME, LAST_NAME, PHONE, SSN, ACCESS_LEVEL)
VALUES('SCHMIDT', 'SCHMIDT', 4789031134, 742028474, 'MA2');
INSERT INTO STAFF(FIRST_NAME, LAST_NAME, PHONE, SSN, ACCESS_LEVEL)
VALUES('NICK', 'MILLER', 7832876483, 731243740, 'Supervisor');
INSERT INTO STAFF(FIRST_NAME, LAST_NAME, PHONE, SSN, ACCESS_LEVEL)
VALUES('CECE', 'PARIKH', 7583920430, 572832950, 'MA2');
INSERT INTO STAFF(FIRST_NAME, LAST_NAME, PHONE, SSN, ACCESS_LEVEL)
VALUES('ERNIE', 'TAGLIABOO', 9120184287, 498213048, 'MA1');
INSERT INTO STAFF(FIRST_NAME, LAST_NAME, PHONE, SSN, ACCESS_LEVEL)
VALUES('ALY', 'NELSON', 7492482038, 248213466, 'Supervisor');
INSERT INTO STAFF(FIRST_NAME, LAST_NAME, PHONE, SSN, ACCESS_LEVEL)
VALUES('JOAN', 'DAY', 4471284273, 32947263, 'MA2');
INSERT INTO STAFF(FIRST_NAME, LAST_NAME, PHONE, SSN, ACCESS_LEVEL)
VALUES('ROBBY', 'MCFERRIN', 3450986372, 592156728, 'MA1');

--vendor values
INSERT INTO VENDOR(VENDOR_NAME, VENDOR_PHONE, VENDOR_FAX, VENDOR_EMAIL)
VALUES('Beckman Coulter', 9524484848, 18002223333, 
'beckman.coulter@outlook.com');
INSERT INTO VENDOR(VENDOR_NAME, VENDOR_PHONE, VENDOR_FAX, VENDOR_EMAIL)
VALUES('Mettler Toledo', 6781240842, 18902228945, 'mettler.toledo@outlook.com');
INSERT INTO VENDOR(VENDOR_NAME, VENDOR_PHONE, VENDOR_FAX, VENDOR_EMAIL)
VALUES('Fisher Scientific', 5738296999, 19004738294,
'fisher.scientific@hotmail.com');
INSERT INTO VENDOR(VENDOR_NAME, VENDOR_PHONE, VENDOR_FAX, VENDOR_EMAIL)
VALUES('Roche', 6124509998, 4738910483, 'roche.laboratories@outlook.com');
INSERT INTO VENDOR(VENDOR_NAME, VENDOR_PHONE, VENDOR_FAX, VENDOR_EMAIL)
VALUES('Grainger', 1800956444, 3940572346, 'grainger.contact@outlook.com');
INSERT INTO VENDOR(VENDOR_NAME, VENDOR_PHONE, VENDOR_FAX, VENDOR_EMAIL)
VALUES('Illumina', 2678840926, 9521364392, 'illumina.resources@gmail.com');
INSERT INTO VENDOR(VENDOR_NAME, VENDOR_PHONE, VENDOR_FAX, VENDOR_EMAIL)
VALUES('Uline', 1800295551, 8005203786, 'uline.corporate@outlook.com');
INSERT INTO VENDOR(VENDOR_NAME, VENDOR_PHONE, VENDOR_FAX, VENDOR_EMAIL)
VALUES('Cole Parmer', 1800323434, 20934719462, 'sales@coleparmer.com');
INSERT INTO VENDOR(VENDOR_NAME, VENDOR_PHONE, VENDOR_FAX, VENDOR_EMAIL)
VALUES('McMaster-Carr', 6308300300, 10947233463, 'mcmastercarr@outlook.com');
INSERT INTO VENDOR(VENDOR_NAME, VENDOR_PHONE, VENDOR_FAX, VENDOR_EMAIL)
VALUES('Zoro', 9348961499, 94726343928, 'request@zoro.com');
INSERT INTO VENDOR(VENDOR_NAME, VENDOR_PHONE, VENDOR_FAX, VENDOR_EMAIL)
VALUES('Boston Scientific', 4679990000, 94246721, 
'contact@bostonscientific.com');

--request values
--used FK values associated with each vendor/staff to verify all relationships
INSERT INTO REQUEST (VENDOR_ID_FK, REQUESTING_STAFF, REQUEST_QUANTITY, 
DATE_NEEDED, COMPLETION_STATUS, DATE_REQUESTED, NOTE)
VALUES(100, 230, 15, NULL, 0, SYSDATE, 
'email vendor if there are questions');
INSERT INTO REQUEST (VENDOR_ID_FK, REQUESTING_STAFF, REQUEST_QUANTITY, 
DATE_NEEDED, COMPLETION_STATUS, DATE_REQUESTED, NOTE)
VALUES(115, 233, 50, '01-JAN-23', 1, SYSDATE, NULL);
INSERT INTO REQUEST (VENDOR_ID_FK, REQUESTING_STAFF, REQUEST_QUANTITY, 
DATE_NEEDED, COMPLETION_STATUS, DATE_REQUESTED, NOTE)
VALUES(130, 236, 15, '01-JAN-23', 0, SYSDATE, NULL);
INSERT INTO REQUEST (VENDOR_ID_FK, REQUESTING_STAFF, REQUEST_QUANTITY, 
DATE_NEEDED, COMPLETION_STATUS, DATE_REQUESTED, NOTE)
VALUES(145, 239, 100, NULL, 1, SYSDATE, NULL);
INSERT INTO REQUEST (VENDOR_ID_FK, REQUESTING_STAFF, REQUEST_QUANTITY, 
DATE_NEEDED, COMPLETION_STATUS, DATE_REQUESTED, NOTE)
VALUES(160, 242, 50, '01-FEB-23', 0, SYSDATE, 
'email vendor if there are questions');
INSERT INTO REQUEST (VENDOR_ID_FK, REQUESTING_STAFF, REQUEST_QUANTITY, 
DATE_NEEDED, COMPLETION_STATUS, DATE_REQUESTED, NOTE)
VALUES(175, 245, 32, NULL, 0, SYSDATE, NULL);
INSERT INTO REQUEST (VENDOR_ID_FK, REQUESTING_STAFF, REQUEST_QUANTITY, 
DATE_NEEDED, COMPLETION_STATUS, DATE_REQUESTED, NOTE)
VALUES(190, 248, 75, NULL, 1, SYSDATE, NULL);
INSERT INTO REQUEST (VENDOR_ID_FK, REQUESTING_STAFF, REQUEST_QUANTITY, 
DATE_NEEDED, COMPLETION_STATUS, DATE_REQUESTED, NOTE)
VALUES(205, 251, 45, NULL, 1, SYSDATE, NULL);
INSERT INTO REQUEST (VENDOR_ID_FK, REQUESTING_STAFF, REQUEST_QUANTITY, 
DATE_NEEDED, COMPLETION_STATUS, DATE_REQUESTED, NOTE)
VALUES(220, 254, 15, NULL, 0, SYSDATE, NULL);
INSERT INTO REQUEST (VENDOR_ID_FK, REQUESTING_STAFF, REQUEST_QUANTITY, 
DATE_NEEDED, COMPLETION_STATUS, DATE_REQUESTED, NOTE)
VALUES(235, 257, 7, '01-MAY-23', 1, SYSDATE, NULL);
INSERT INTO REQUEST (VENDOR_ID_FK, REQUESTING_STAFF, REQUEST_QUANTITY, 
DATE_NEEDED, COMPLETION_STATUS, DATE_REQUESTED, NOTE)
VALUES(250, 257, 75, NULL, 0, SYSDATE, NULL);

--manufacturing values
INSERT INTO MANUFACTURING (MANUFACTURING_STAFF, PROCESS_DESCRIPTION,
DATE_USED, PROCESS_STATUS, QUANTITY_USED, WASTED_MATERIALS)
VALUES (230, 'pH probe standardization', SYSDATE, 1, 2, NULL);
INSERT INTO MANUFACTURING (MANUFACTURING_STAFF, PROCESS_DESCRIPTION,
DATE_USED, PROCESS_STATUS, QUANTITY_USED, WASTED_MATERIALS)
VALUES (233, 'BSC cleaning', SYSDATE, 1, 1, NULL);
INSERT INTO MANUFACTURING (MANUFACTURING_STAFF, PROCESS_DESCRIPTION,
DATE_USED, PROCESS_STATUS, QUANTITY_USED, WASTED_MATERIALS)
VALUES (236, 'CIP of bioreactor', '01-MAR-21', 1, 2, NULL);
INSERT INTO MANUFACTURING (MANUFACTURING_STAFF, PROCESS_DESCRIPTION,
DATE_USED, PROCESS_STATUS, QUANTITY_USED, WASTED_MATERIALS)
VALUES (239, 'autoclave of assemblies', '09-DEC-20', 1, 1, 1);
INSERT INTO MANUFACTURING (MANUFACTURING_STAFF, PROCESS_DESCRIPTION,
DATE_USED, PROCESS_STATUS, QUANTITY_USED, WASTED_MATERIALS)
VALUES (242, 'pH probe standardization', '12-FEB-20', 1, 3, 2);
INSERT INTO MANUFACTURING (MANUFACTURING_STAFF, PROCESS_DESCRIPTION,
DATE_USED, PROCESS_STATUS, QUANTITY_USED, WASTED_MATERIALS)
VALUES (245, 'filter integrity test', '30-SEP-21', 1, 1, NULL);
INSERT INTO MANUFACTURING (MANUFACTURING_STAFF, PROCESS_DESCRIPTION,
DATE_USED, PROCESS_STATUS, QUANTITY_USED, WASTED_MATERIALS)
VALUES (248, 'column packing', '01-OCT-21', 1, 2, 10);
INSERT INTO MANUFACTURING (MANUFACTURING_STAFF, PROCESS_DESCRIPTION,
DATE_USED, PROCESS_STATUS, QUANTITY_USED, WASTED_MATERIALS)
VALUES (251, 'column san/store', '01-OCT-21', 0, 3, NULL);
INSERT INTO MANUFACTURING (MANUFACTURING_STAFF, PROCESS_DESCRIPTION,
DATE_USED, PROCESS_STATUS, QUANTITY_USED, WASTED_MATERIALS)
VALUES (254, 'DO probe polarization', '02-NOV-21', 0, 1, NULL);
INSERT INTO MANUFACTURING (MANUFACTURING_STAFF, PROCESS_DESCRIPTION,
DATE_USED, PROCESS_STATUS, QUANTITY_USED, WASTED_MATERIALS)
VALUES (257, 'weight and dispense', '02-NOV-21', 1, 1, 9);

--material values
INSERT INTO MATERIAL(REQUEST_ID_FK, PROCESS_NUMBER_FK, VENDOR_ID_REQUEST_FK, 
EXPIRATION_DATE, HAZARD_LEVEL, MATERIAL_NAME, QUANTITY_AVAILABLE, 
STORAGE_LOCATION, PRICE)
VALUES(500, 100, 100, '31-DEC-2023', NULL, 
'7.00 pH buffer', 60, 'Room 1003', 25.00);
INSERT INTO MATERIAL(REQUEST_ID_FK, PROCESS_NUMBER_FK, VENDOR_ID_REQUEST_FK, 
EXPIRATION_DATE, HAZARD_LEVEL, MATERIAL_NAME, QUANTITY_AVAILABLE, 
STORAGE_LOCATION, PRICE)
VALUES(503, 120, 115, '31-DEC-2023', 'Flammable', 
'IPA Bottle, isopropyl alcohol 95%', 200, 'Room 1000', 10.00);
INSERT INTO MATERIAL(REQUEST_ID_FK, PROCESS_NUMBER_FK, VENDOR_ID_REQUEST_FK, 
EXPIRATION_DATE, HAZARD_LEVEL, MATERIAL_NAME, QUANTITY_AVAILABLE, 
STORAGE_LOCATION, PRICE)
VALUES(506, 140, 130, '01-JAN-2024', NULL, 
'pH probe', 150, 'Room 1500', 45.00);
INSERT INTO MATERIAL(REQUEST_ID_FK, PROCESS_NUMBER_FK, VENDOR_ID_REQUEST_FK, 
EXPIRATION_DATE, HAZARD_LEVEL, MATERIAL_NAME, QUANTITY_AVAILABLE, 
STORAGE_LOCATION, PRICE)
VALUES(509, 160, 145, NULL, NULL, 
'5ft silicone tubing', 100, 'Room 1100', 40.00);
INSERT INTO MATERIAL(REQUEST_ID_FK, PROCESS_NUMBER_FK, VENDOR_ID_REQUEST_FK, 
EXPIRATION_DATE, HAZARD_LEVEL, MATERIAL_NAME, QUANTITY_AVAILABLE, 
STORAGE_LOCATION, PRICE)
VALUES(512, 180, 160, '15-MAR-2023', 'Carcinogenic', 
'tryphan blue', 5, 'Room 1100', 55.00);
INSERT INTO MATERIAL(REQUEST_ID_FK, PROCESS_NUMBER_FK, VENDOR_ID_REQUEST_FK, 
EXPIRATION_DATE, HAZARD_LEVEL, MATERIAL_NAME, QUANTITY_AVAILABLE, 
STORAGE_LOCATION, PRICE)
VALUES(515, 200, 175, NULL, NULL, 
'6" round filters', 75, 'Room 1100', 155.00);
INSERT INTO MATERIAL(REQUEST_ID_FK, PROCESS_NUMBER_FK, VENDOR_ID_REQUEST_FK, 
EXPIRATION_DATE, HAZARD_LEVEL, MATERIAL_NAME, QUANTITY_AVAILABLE, 
STORAGE_LOCATION, PRICE)
VALUES(518, 220, 190, NULL, NULL, 
'resin', 30, 'Room 1100', 1000.00);
INSERT INTO MATERIAL(REQUEST_ID_FK, PROCESS_NUMBER_FK, VENDOR_ID_REQUEST_FK, 
EXPIRATION_DATE, HAZARD_LEVEL, MATERIAL_NAME, QUANTITY_AVAILABLE, 
STORAGE_LOCATION, PRICE)
VALUES(521, 240, 205, '01-JAN-25', NULL, 
'8.00pH buffer', 36, 'Room 1003', 19.45);
INSERT INTO MATERIAL(REQUEST_ID_FK, PROCESS_NUMBER_FK, VENDOR_ID_REQUEST_FK, 
EXPIRATION_DATE, HAZARD_LEVEL, MATERIAL_NAME, QUANTITY_AVAILABLE, 
STORAGE_LOCATION, PRICE)
VALUES(524, 260, 220, NULL, 'High Pressure', 
'N2 gas', 1000, 'Room 1100', 0.75);
INSERT INTO MATERIAL(REQUEST_ID_FK, PROCESS_NUMBER_FK, VENDOR_ID_REQUEST_FK, 
EXPIRATION_DATE, HAZARD_LEVEL, MATERIAL_NAME, QUANTITY_AVAILABLE, 
STORAGE_LOCATION, PRICE)
VALUES(527, 280, 235, NULL, NULL, 
'sodium hydroxide powder', 53, 'Room 1003', 23.69);

--commit inserted statements
COMMIT;

--QUERIES/SELECT STATEMENTS
--QUERY 1: SELECT ALL COLUMNS AND ALL ROWS FROM ONE TABLE
--BUSINESS PURPOSE: THIS QUERY SHOWS ALL INFORMATION ABOUT ALL VENDORS
SELECT * FROM VENDOR;

--QUERY 2:SELECT 5 COLUMNS AND ALL ROWS FROM ONE TABLE
--BUSINESS RULE: This query displays characteristics of the materials
--currently stored in the database
SELECT MATERIAL_ID, MATERIAL_NAME, EXPIRATION_DATE, HAZARD_LEVEL, 
QUANTITY_AVAILABLE FROM MATERIAL;

--QUERY 3: SELECT ALL COLUMNS AND ALL ROWS FROM ONE VIEW
/*
BUSINESS RULE: THIS QUERY DISPLAYS THE VIEW VW_REQUEST WHICH DISPLAYS THE 
REQUEST INFORMATION SUCH AS VENDOR AND MATERIAL DATA AND QUANTITY
*/ 
SELECT * FROM VW_REQUEST;

/*
QUERY 4: Using a join on 2 tables, select all columns and all rows from 
the tables without the use of a Cartesian product
BUSINESS RULE: THIS QUERY DISPLAYS THE VENDOR AND WHAT MATERIALS THEY PRODUCE,
ALONG WITH THE MOST RECENT REQUEST NUMBER FOR EACH MATERIAL PRODUCED 
BY THE VENDOR
*/
SELECT * FROM VENDOR v JOIN MATERIAL m ON v.VENDOR_ID=m.VENDOR_ID_REQUEST_FK;

--QUERY 5: SELECT AND ORDER DATA RETRIEVED FROM ONE TABLE
/*BUSINESS RULE: THIS QUERY DISPLAYS THE MATERIALS CURRENTLY IN INVENTORY
AND DISPLAYS THE QUANTITIES AVAILABLE IN INVENTORY, ORDERED BY THE QUANTITY
AVAILABLE IN ASC ORDER*/
SELECT MATERIAL_NAME, QUANTITY_AVAILABLE FROM MATERIAL 
ORDER BY QUANTITY_AVAILABLE ASC;

/*QUERY 6: Using a join on 3 tables, select 5 columns from the 3 tables. 
Use syntax that would limit the output to 10 rows.
BUSINESS RULE: This query displays the full name, request ID number, and
material description in the submitted request
*/
SELECT s.FIRST_NAME|| ' ' || s.LAST_NAME AS STAFF_NAME, r.REQUEST_ID, 
m.MATERIAL_NAME, m.MATERIAL_ID FROM STAFF s JOIN REQUEST r ON 
s.STAFF_ID=r.REQUESTING_STAFF JOIN MATERIAL m ON m.REQUEST_ID_FK=r.REQUEST_ID 
GROUP BY s.FIRST_NAME, s.LAST_NAME,
r.REQUEST_ID, m.MATERIAL_NAME, m.MATERIAL_ID FETCH FIRST 10 ROWS ONLY;

--Query 7: Select distinct rows using joins on 3 tables
/*Business Rule: This query displays all of the processes that use 
hazardous materials and staff who have performed the process*/
SELECT m.MATERIAL_NAME, m.HAZARD_LEVEL, p.PROCESS_DESCRIPTION,
s.FIRST_NAME || ' ' || s.LAST_NAME AS STAFF_NAME FROM MATERIAL m JOIN 
MANUFACTURING p ON m.PROCESS_NUMBER_FK=p.PROCESS_NUMBER JOIN STAFF s ON
s.STAFF_ID=p.MANUFACTURING_STAFF WHERE m.HAZARD_LEVEL IS NOT NULL ORDER BY 
m.MATERIAL_ID, m.HAZARD_LEVEL, p.PROCESS_DESCRIPTION, s.FIRST_NAME,
s.LAST_NAME;

--Query 8: Use GROUP BY and HAVING in a SELECT statement using one or more tables
/*Business Rule: This statament displays the total amount of wasted materials 
during each process where the total wasted was greater than 5.
*/
SELECT SUM(p.WASTED_MATERIALS) AS TOTAL_WASTED, m.MATERIAL_NAME FROM 
MANUFACTURING p JOIN MATERIAL m ON m.PROCESS_NUMBER_FK = p.PROCESS_NUMBER 
GROUP BY p.WASTED_MATERIALS, m.MATERIAL_NAME HAVING SUM(WASTED_MATERIALS)>5;

--Query 9: Use IN clause to select data from one or more tables
/*Business Rule: The statement below shows all staff who have performed the 
process 'pH probe standardization' and offers another route of identifying staff
trained on the process
*/
SELECT s.FIRST_NAME || ' ' || s.LAST_NAME AS STAFF_NAME, p.DATE_USED FROM STAFF s
JOIN MANUFACTURING p ON p.MANUFACTURING_STAFF=s.STAFF_ID WHERE
p.PROCESS_DESCRIPTION IN ('pH probe standardization') ORDER BY s.FIRST_NAME,
s.LAST_NAME, p.DATE_USED;

--Query 10: select length of one column from one table (use LENGTH function)
/*Business Rule: This statement dispays the length of each staffs full name, 
can be used to determine the average space required to store each staff's name
in the database*/ 
SELECT FIRST_NAME || ' ' || LAST_NAME AS FULL_NAME, LENGTH(LAST_NAME)
"NAME LENGTH" FROM STAFF;

/*Query 11: Delete one record from one table. Use select statements to 
demonstrate the table contents before and after the DELETE statement. 
Make sure you use ROLLBACK afterwards 
so that the data will not be physically removed
Business Rule: This statement demonstrates how to remove a material from the 
database, which may be used when a material is no longer used at plant #111.
*/
SELECT * FROM MATERIAL;
DELETE FROM MATERIAL WHERE MATERIAL_NAME='N2 gas';
SELECT * FROM MATERIAL;
--REVERT THE CHANGE
ROLLBACK;

/*QUERY 12: Update one record from one table. Use select statements to 
demonstrate the table contents before and after the UPDATE statement. 
Make sure you use ROLLBACK afterwards so that the data will not be 
physically removed
Business Rule: This statement changes the current storage location of the 
material resin to room 1500.
*/
SELECT * FROM MATERIAL WHERE MATERIAL_NAME='resin';
UPDATE MATERIAL SET STORAGE_LOCATION='1500' WHERE MATERIAL_NAME='resin';
SELECT * FROM MATERIAL WHERE MATERIAL_NAME='resin';
--KEEP UPDATE
COMMIT;

/*Query 13: Advanced Query
Business Rule: This statement displays the average quantity requested for each
material*/
SELECT m.MATERIAL_NAME, AVG(r.REQUEST_QUANTITY)AS AVERAGE_QUANTITY FROM 
MATERIAL m JOIN REQUEST r ON r.REQUEST_ID=m.REQUEST_ID_FK 
GROUP BY m.MATERIAL_NAME, r.REQUEST_QUANTITY ORDER BY AVG(r.REQUEST_QUANTITY)ASC;

/*Query 14: Advanced Query
Business Rule: This statement displays the number of processes each staff member 
has performed*/
SELECT s.FIRST_NAME || ' ' || s.LAST_NAME AS STAFF_NAME,(SELECT
COUNT(p.PROCESS_NUMBER) FROM MANUFACTURING p WHERE 
p.MANUFACTURING_STAFF=s.STAFF_ID)AS TOTAL_PERFORMED FROM STAFF s;

/* Query 15: Advanced Query
Business Rule: This statement displays th material and quantity used by each 
employee*/
SELECT t.FIRST_NAME || ' ' || t.LAST_NAME AS STAFF_NAME, t.MATERIAL_NAME, 
SUM(t.QUANTITY_USED) AS MATERIALS_USED FROM 
(SELECT s.FIRST_NAME, s.LAST_NAME, m.MATERIAL_NAME, p.QUANTITY_USED FROM STAFF s JOIN 
MANUFACTURING p ON s.STAFF_ID=p.MANUFACTURING_STAFF JOIN MATERIAL m ON 
m.PROCESS_NUMBER_FK=p.PROCESS_NUMBER)t GROUP BY t.FIRST_NAME, t.LAST_NAME,
t.MATERIAL_NAME;

/*Query 16: Advanced Query 
Business Rule: This statement displays the total amount owed to each vendor 
per request submitted, based upon the quantity of each material being requested 
and the cost per material*/
SELECT t.VENDOR_NAME, t.MATERIAL_NAME, SUM(t.REQUEST_QUANTITY)*t.PRICE 
AS TOTAL_OWED
FROM (SELECT v.VENDOR_NAME, m.MATERIAL_NAME, r.REQUEST_QUANTITY, m.PRICE FROM
VENDOR v JOIN REQUEST r ON r.VENDOR_ID_FK=v.VENDOR_ID JOIN MATERIAL m ON 
m.REQUEST_ID_FK=r.REQUEST_ID)t GROUP BY t.VENDOR_NAME, t.MATERIAL_NAME,
t.REQUEST_QUANTITY, t.PRICE;

/*Query 17: Advanced Query 
Business Rule: This statement displays the vendor who supplies the most
expensive material, along with the product description and price*/
SELECT v.VENDOR_NAME, m.MATERIAL_NAME, m.PRICE FROM 
VENDOR v JOIN REQUEST r ON v.VENDOR_ID=r.VENDOR_ID_FK 
JOIN MATERIAL m ON m.REQUEST_ID_FK=r.REQUEST_ID WHERE m.PRICE IN
(SELECT MAX(PRICE) FROM MATERIAL) ORDER BY v.VENDOR_NAME, m.MATERIAL_NAME, 
m.PRICE;

/*Query 18: Advanced Query
Business Rule: This statement displays manufacturing processes with the 
most expensive material cost first*/
SELECT t.PROCESS_DESCRIPTION, SUM(t.QUANTITY_USED)*t.PRICE AS PROCESS_COST FROM
(SELECT p.PROCESS_DESCRIPTION, p.QUANTITY_USED, m.PRICE FROM MANUFACTURING p
JOIN MATERIAL m ON p.PROCESS_NUMBER=m.PROCESS_NUMBER_FK)t GROUP BY 
t.PROCESS_DESCRIPTION, t.QUANTITY_USED, t.PRICE ORDER BY PROCESS_COST DESC;

/*Query 19: Advanced Query
Business Rule: This statement displays vendors who have currently pending 
requests, and the amount of each material that is pending*/
SELECT t.VENDOR_NAME, COUNT(t.REQUEST_ID) AS PENDING_REQUESTS, 
SUM(t.REQUEST_QUANTITY) AS QUANTITY_PENDING_MATERIALS, t.MATERIAL_NAME
FROM(SELECT v.VENDOR_NAME, r.REQUEST_ID, r.REQUEST_QUANTITY, m.MATERIAL_NAME, 
r.COMPLETION_STATUS FROM VENDOR v JOIN REQUEST r ON v.VENDOR_ID=r.VENDOR_ID_FK
JOIN MATERIAL m ON m.REQUEST_ID_FK=r.REQUEST_ID)t WHERE 
COMPLETION_STATUS=0 GROUP BY t.VENDOR_NAME, t.REQUEST_ID, t.REQUEST_QUANTITY,
t.MATERIAL_NAME ORDER BY QUANTITY_PENDING_MATERIALS DESC;

/*Query 20: Advanced Query
Business Rule: This statement displays all vendors who have pending requests,
with orders that are needed within 3 months*/
SELECT t.VENDOR_NAME, t.DATE_NEEDED, t.COMPLETION_STATUS, MONTHS_BETWEEN(SYSDATE,
t.DATE_NEEDED)*-1 AS MONTHS_UNTIL_NEEDED FROM 
(SELECT v.VENDOR_NAME, r.DATE_NEEDED, r.COMPLETION_STATUS FROM VENDOR v 
JOIN REQUEST r ON v.VENDOR_ID=r.VENDOR_ID_FK)t WHERE t.COMPLETION_STATUS= 0 AND 
t.DATE_NEEDED IS NOT NULL AND (MONTHS_BETWEEN(SYSDATE,
t.DATE_NEEDED)*-1)<3
GROUP BY t.VENDOR_NAME, t.DATE_NEEDED, t.COMPLETION_STATUS;
